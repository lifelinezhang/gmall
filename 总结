总结：
day01：
	nacos：注册及配置中心
		nacos服务：阿里官方提供了nacos-server（bat sh）
		注册中心：
			1、引入依赖：distovery-starter
			2、配置：在application.yml：spring.cloud.nacos.discovery.server-addr
			3、注解：@EnableDiscoveryClient
		配置中心：
			1、引入依赖：config-starter
			2、配置：bootstrap.yml: 
						spring.cloud.nacos.config.server-addr：地址
						spring.cloud.nacos.config.namespace：唯一标志
						spring.cloud.nacos.config.group：组名
						spring.cloud.nacos.ext-config[0].data-id：配置名
						spring.cloud.nacos.ext-config[0].group：组名
						spring.cloud.nacos.ext-config[0].refresh：自动刷新
			3、RefreshScope：配置动态刷新
			好处：
				1、可以动态刷新配置，即使改动了配置，也不需要重启
				2、统一管理配置文件
				3、配置文件自身的版本管理
	gateway：网关组件
		动态路由、负载均衡、身份认证、限流、路径重写、熔断降级、请求过滤
		spring.cloud.gateway.routes
			id:唯一标志
			uri:路由的路径
			predicates:断言（判断）
			filters:过滤器（拦截、重写）
		自定义过滤器：
			1、编写class实现GatewayFilter接口（推荐继承AbstractGatewayFilter）
			2、编写xxxGatewayFilterFactory实现GatewayFilterFactory（xxx就是过滤器的名称）
			3、通过名称xxx就可以使用了
		
day02：
	搭建环境
		通过逆向工程生成单表操作的增删改查代码
	mybatis-plus：在mybatis的基础上只做增强，不做改变
		单表的crud不需要自己写了
		1、引入依赖：参照官网
		2、配置
			mybatis-plus.mapper-locations=class:mappers/pms/**/*.xml
			mybatis-plus.global-config.db-config-id-type=auto(数据库自增；默认是分布式id生成策略；input可以自己指定id)
		3、注解:@MapperScan(dao/mapper包路径)
				@TableName("表名")：当实体类跟表明不一致的情况下指定
				@TableId(type = IdType.INPUT)：指定表的主键策略
				@TableField("列名")：当字段名跟数据库表列名不一致的情况下，指定该字段对应的数据库字段名
		4、分页插件：mp本身不支持分页，要开启分页功能需要使用分页插件
			@Configuration
			public class MybatisPlusConfig {
				@Bean
				public PaginationInterceptor paginationInterceptor() {
					PaginationInterceptor paginationInterceptor = new PaginationInterceptor();
					paginationInterceptor.setCountSqlParser(new JsqlParserCountOptimize(true));
					return paginationInterceptor;
				}
			}
		5、Wrapper：QueryWrapper, UpdateWrapper
			

	cors解决跨域
		浏览器的同源策略造成的
		什么情况下会出现跨域？
			1、首先必须是ajax请求
			2、域名不一致/端口不一致/协议不一致
		解决方案：
			1、nginx反向代理为不跨域
			2、jsonp方式：只能解决get请求的跨域问题
			3、cors浏览器规范
				发送两次请求：预检请求（允许跨域的请求方法，允许哪些域名跨域，是否允许携带cookie，允许携带的头信息） 真正的请求
		其中cors这种方法spring提供了统一的过滤器解决方案：
			springmvc：CorsFilter
			springWebFlux：CorsWebFilter
	
	阿里oss：
		浏览器直传图片到阿里云服务器
		
		
day03
	spu：标准商品单元，商品集合
	sku：库存量单元，具体的商品
	规格参数
	表关系
	保存商品（保存pms sms wms）
	
day04
	本地事务
		@Trancactional
		事务：逻辑上的一组操作，组成这组操作的各个逻辑单元，要么都成功，要么都失败
		ACID：原子性，一致性，隔离性，持久性
		隔离级别：
			read uncommitted：读未提交，脏读（不允许发生）
			read committed：读已提交，不可重复度（可允许） oracle默认
			repeatable read：可重复读，幻读/虚读（可允许） mysql默认
			serializeable read：序列化读
		传播行为：7种传播行为
			required：一个事务，要么成功，要么失败
			required_new：两个不同事务，彼此之间没有关系，一个事务失败了不影响另一个事务
		回滚策略：
			默认的回滚策略：编译时（受检）异常不回滚，运行时（不受检）异常都会回滚
			rollbackfor：
			rollbackforclassname：
			norollbackfor：
			norollbackforclassname：
		只读事务：不能做增删改操作，只能读取数据
			readonly=true
		超时事务：timeout=3
		
	分布式事务：网络、服务器宕机、消息丢失
		场景：
			1、不同的服务，不同数据库
			2、不同的服务，相同数据库
			3、相同的服务，不同数据库
		解决方案：
			1、两阶段提交（XA：数据库支持  seata 性能较低）
			2、tcc补偿机制（t：try   c：confirm   c：cancel）
			3、消息队列的最终一致性（性能最高）
		seata：
			seata-server服务
			每一个数据库都要有一个undo_log表
			1、引入依赖：参照官方文档
			2、配置：
				1、registry.conf
				2、file.conf
				3、java配置：配置数据源代理	
			3、注解：@GloableTransactional  @Transactional
		
day05
	倒排索引：文档列表，倒排索引区
	全文检索：从海量数据中快速获取我们需要的信息
	lucene：底层api
	搜索产品：solr、elasticsearch
	elasticsearch
		安装：jvm.option  elasticsearch.yml
		kibana：
		ik分词器：ik_max_word ik_smart
			扩展词典（nginx配置，添加分词后不用重启） 停用词典
	dsl语法：
	java客户端：jest springData-elasticsearch(项目中使用的)
	注解
	
day06
	数据模型的设计
		@Document，作用在实体类上
		@Id，主键字段
		@Field，
	数据导入功能
	dsl语句（面试的时候问的少）
	代码实现搜索功能
	
day07
	rabbitmq及数据同步
	MQ：message queue消息队列
	作用：削峰 异步 解耦
	实现：amqp（rabbitmq 协议 五种消息模型  任何语言都可以实现）  
		  jms（activemq java规范 提供了两种消息模型 必须是java实现）
	安装：docker安装  5672(java) 15672 (浏览器客户端) 25672(集群端口)
	五种消息模型：
		1、sample（简单模型）
		2、work（工作模型）
		3、发布订阅之fanout（消息发送之后，所有的队列都可以获取消息）
		4、发布订阅之direct（路由：定向发送消息）
		5、发布订阅之topic（通配符：*一个词  #一个或多个词）
	ACK：消息确认机制
	能者多劳：channel.basicQos(1)
	持久化：交换机持久化 队列持久化 消息持久化
	springboot整合rabbitMQ
		1、引入依赖：amqp-starter
		2、配置：rabbit连接信息  spring.rabbitmq
		3、注解：接收消息
			@RabbitListener(bindings = @QueueBinding(
				value = @Queue(value = "队列名称"， durable = "true"),
				exchange = @Exchange(value = "交换机名称"，ignoreDeclareExchange = "true", type = ExchangeTypes.TOPIC),
				key = {"routingkey"}
			))
		4、发送消息
			AmqpTemplate.convertAndSend
			
day08
	首页三级分类查询
	添加缓存：
		标准：1、写的频率低  2、读的频率比较高
	过程：1、查询缓存有没有 2、缓存中没有查询数据库 3、放入缓存
	缓存存在的问题：
		雪崩：给缓存的过期时间添加一个随机值
		穿透：即使数据库中的数据为null，也缓存
		击穿：分布式锁
	实现分布式锁：
		标准：1、排他  
			  2、防止死锁的发生，设置有效时间
			  3、防止释放别人的锁
		实现：
			  1、获取锁（保证原子性）
			  2、释放锁（保证原子性）
			  3、重试（没有锁的请求）
	redisson：
		1、引入依赖
		2、java配置
		3、RedissonClient.getLock();
			semahore countdownlatch 读写锁
	使用AOP结合分布式锁实现缓存的封装		
		1、自定义注解@GmallCache
		2、编写切面实现缓存功能：环绕通知
		
day09
	商品详情页：大量的远程调用
	优化：页面静态化、缓存、异步编排
	异步编排：CompletableFuture
		线程初始化方式：
			1、继承thread
			2、实现runnable接口
			3、实现callable接口 + futureTask
			4、线程池
		异步任务初始化：
			runAsync：没有返回值
			supplyAsyna：有返回值
		任务完成时方法：
			whenComplete（(t, u) -> {正常或者异常情况下开启另一个任务}）
			whenCompleteAsync
			exceptionally(t -> {})
		处理任务完成结果
			handle(t -> {处理任务完成时的结果})
		中间的串行方法：
			thenApply(): 获取上一个任务的返回结果集，并返回自己的结果集
			thenAccept()：获取上一个任务的返回结果集，执行自己的任务，没有返回值
			thenRun()：上一个任务结束，执行自己的任务，不获取返回结果集，也没有自己的结果集
			thenApplyAsync():
			thenAcceptAsync():
			thenRunAysnc():
		两个任务组合都要完成：thenCombine
		两任务组合，一个完成
		多任务组合：allof   anyOf
	
day10
	单点登录
	注册功能： 
		1、校验数据是否可用：用户名、手机号、邮箱
		2、发送短信验证码（生成验证码，发消息并把短信验证码保存到redis中）
		3、用户注册功能
			1) 校验验证码
			2) 生成盐
			3) 对密码进行加盐加密
			4) 保存用户信息
			5) 删除redis中的验证码
		4、根据用户名和密码查询用户
			1) 根据用户名查询用户信息
			2) 判断用户是否存在
			3) 对用户输入的密码加盐加密
			4) 和数据库中的密码进行比较
	cookie
		作用域：子可以访问父，父不可操作子，token的域使用一级域名
		作用路径：/
		过期时间：
	单点登录：
		无状态登录：jwt + rsa
		jwt：
			头部信息：token类型，编码方式
		 	载荷信息：用户具体信息
			签名信息：校验前两部分信息是否合法（rsa）
		加密方式：
			对称加密：base64
			不可逆加密：md5
			非对称加密：rsa（公钥和私钥）
	代码具体实现：参照课程代码
	
day11
	购物车需求：
		新增购物车：
		删除购物车：
		查询购物车：
		修改数量：
		勾选购物车：
		比价：
	技术选型：
		未登录：redis/mysql/cookie/浏览器端数据库/mongodb(nosql数据库，硬盘，写比较频繁)
		登录：mysql + redis/redis/mongodb
	数据模型：hash（散列）
	业务流程：
		新增购物车：判断是否登录；未登录，使用userkey放入redis中；登录的情况下使用userId放入redis中
		查询：判断是否登录：未登录：0根据userKey查询；登录：同步未登录状态的购物车到登录状态的购物车再查询
	比价：单独保存一份实时价格到redis中，查询购物车时，实时价格单独查询
	价格同步：使用消息队列
	
	获取用户登录信息的拦截器：
		ThreadLocal
		1、实现HandleInterceptor接口
		2、实现三个方法
			1、preHandle方法：返回值：true，放行；false，拦截
				统一获取用户登录状态（jwt类型的token进行解析）
				放入ThreadLocal
			2、postHandle方法：后置方法
			3、afterComplete方法：完成方法，视图渲染完成之后执行
				ThreadLocal.remove()释放线程的局部变量，防止内存泄漏
		3、编写配置类，实现WebMvcConfigurer接口
			
day12
	订单
		订单确认：
			数据模型：orderToken防止表单重复提交  收货地址列表 配送方式 送货清单 积分信息
 			IdWorker：雪花算法生成分布式id
		订单提交：
			提交数据模型：orderToken防止表单重复提交、收货地址、配送方式、支付方式、送货清单、积分信息、发票信息、总价
			业务流程：
				1、防重复
				2、验价
				3、验库锁库
				4、下单
				5、删除购物车
		定时关单：
			1、定时任务
			2、延时队列
	支付
		内网穿透：哲西云
		阿里沙箱支付
		支付成功异步回调
	秒杀
		页面静态化、限流、异步、缓存
		页面限流、nginx限流（漏斗算法、令牌桶算法）
		网关限流：限流过滤器
		服务器内部限流：信号量
		用户查看订单时，使用闭锁
	
		